generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  OK
  PENDING
}

model Store {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  updatedBy String?
  readonly  Boolean   @default(false)

  name        String  @unique @db.VarChar(255)
  slug        String  @default(uuid(7))
  description String? @db.VarChar(2000)

  Quantities    Quantity[]
  SerialNumbers SerialNumber[]
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  updatedBy String?
  readonly  Boolean   @default(false)

  parentId    Int?
  name        String  @unique @db.VarChar(255)
  slug        String  @default(uuid(7))
  description String? @db.VarChar(2000)

  Parent   Category?  @relation("Categories", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  Children Category[] @relation("Categories")
  Products Product[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  updatedBy String?
  readonly  Boolean   @default(false)

  name        String  @unique @db.VarChar(255)
  slug        String  @default(uuid(7))
  description String? @db.VarChar(2000)

  ProductTags ProductTag[]
}

model ProductTag {
  id        String    @unique @default(uuid(7))
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  updatedBy String?
  readonly  Boolean   @default(false)

  productId Int
  tagId     Int

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Manufacturer {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid(7))
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  updatedBy String?

  name String @unique @db.VarChar(255)

  Product Product[]
}

model Product {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid(7))
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  updatedBy String?
  readonly  Boolean   @default(false)

  parentId       Int?
  categoryId     Int?
  manufacturerId Int?
  name           String  @unique @db.VarChar(255)
  slug           String  @default(uuid(7))
  model          String? @db.VarChar(255)
  description    String? @db.VarChar(2000)
  upc            String  @unique
  sku            String  @unique
  active         Boolean @default(true)

  Parent        Product?       @relation("Variants", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Category      Category?      @relation(fields: [categoryId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  Manufacturer  Manufacturer?  @relation(fields: [manufacturerId], references: [id])
  Variants      Product[]      @relation("Variants")
  ProductTags   ProductTag[]
  Prices        Price[]
  Quantities    Quantity[]
  SerialNumbers SerialNumber[]
}

model PriceLevel {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  updatedBy String?
  readonly  Boolean   @default(false)

  name        String  @unique @db.VarChar(255)
  slug        String  @default(uuid(7))
  description String? @db.VarChar(2000)
  taxrate     Decimal @db.Decimal(3, 2)

  Prices Price[]
}

model Price {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  updatedBy String?
  readonly  Boolean   @default(false)

  productId    Int
  priceLevelId Int
  price        Decimal @db.Decimal(10, 2)

  Product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PriceLevel PriceLevel @relation(fields: [priceLevelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Quantity {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  updatedBy String?
  readonly  Boolean   @default(false)

  storeId     Int
  productId   Int
  quantity    Int
  minQuantity Int

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SerialNumber {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  updatedBy String?
  readonly  Boolean   @default(false)

  storeId      Int
  productId    Int
  serialNumber String  @unique
  inStock      Boolean @default(true)

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
