import type { DMMF } from '@prisma/client/runtime/library';

/**
 * Check the field is required or not base on the `field.isRequired` option
 * @param field
 * @returns
 */
export function isRequiredField(field: DMMF.Field): boolean {
  if (isGeneratedField(field)) {
    return false;
  }

  if (field.hasDefaultValue) {
    return false;
  }

  return field.isRequired == true;
}

/**
 * Check the field name is one of the pre-defined currency fields
 * @param name
 * @returns
 */
export function isCurrencyField(name: string) {
  return new RegExp(
    /(cost|price|total|subtotal|tax|salesPrice|amount|rate|value|fee|revenue|expense|budget|discount|debit|credit|finance|currency|money|usd|eur|gbp|jpy)$/i
  ).test(name);
}

/**
 * Check the field is generated by the database or has any `generated` indication in documentation
 * @param field
 * @returns
 */
export function isGeneratedField(field: DMMF.Field) {
  if (field.kind === 'unsupported') {
    return true;
  }

  if (field.default) {
    const defaultName = (field.default as DMMF.FieldDefault).name;
    if (defaultName === 'uuid') return true;
    if (defaultName === 'autoincrement') return true;
    if (defaultName === 'now') return true;
  }

  if (field.isUpdatedAt) {
    return true;
  }

  return false;
}

export function isTimestampField(field: DMMF.Field): boolean {
  if (field.isUpdatedAt) {
    return true;
  }

  if (field.default && (field.default as DMMF.FieldDefault).name === 'now') {
    return true;
  }

  if (field.name === 'deletedAt' && field.isRequired !== true) {
    return true;
  }

  if (field.name === 'createdAt' && field.isRequired !== true) {
    return true;
  }

  if (field.name === 'updatedAt' && field.isRequired !== true) {
    return true;
  }

  return false;
}

/**
 * Check the field is marked as `@internal` which is not included in the input schemas
 * @param field
 * @returns
 */
export function isInternalField(field: DMMF.Field): boolean {
  return !!field.documentation?.includes('@internal');
}

export function isReadOnlyField(feild: DMMF.Field): boolean {
  return !!feild.documentation?.includes('@readonly');
}

/**
 * Check the field is relation field
 * @param field DMMF.Field
 * @returns boolean
 */
export function isRelationField(field: DMMF.Field) {
  return field.relationName != undefined;
}

/**
 * Check the field is NOT relation field
 * @param field DMMF.Field
 * @returns boolean
 */
export function isOwnField(field: DMMF.Field) {
  return field.relationName == undefined;
}

/**
 * Check the field is an input field that should be in the create and update schema objects
 * @param field DMMF.Field
 * @returns boolean
 */
export function isInputField(field: DMMF.Field) {
  if (field.isId) {
    return false;
  }

  if (isInternalField(field)) {
    return false;
  }

  if (isTimestampField(field)) {
    return false;
  }

  if (isRelationField(field)) {
    return false;
  }

  return true;
}

export function isUpdateInputField(field: DMMF.Field) {
  return isInputField(field) && !isReadOnlyField(field);
}

/**
 * Check the field name is a short string name
 * @param name
 * @returns
 */
export function isShortStringField(name: string) {
  // Matches common terms for short text fields, typically 255 characters or less.
  // The 'i' flag makes the match case-insensitive.
  // The '$' anchor ensures the match is at the end of the string for precision.
  return new RegExp(
    /(name|label|code|abbr|acronym|title|key|short|brief|ref|reference|city|state|country)$/i
  ).test(name);
}

/**
 * Check the field is a foreign key id
 * @param model
 * @param field
 * @returns
 */
export function isIdField(model: DMMF.Model, field: DMMF.Field): boolean {
  return model.fields
    .filter(isRelationField)
    .some(
      (e) =>
        e.relationFromFields?.includes(field.name) ||
        e.relationToFields?.includes(field.name)
    );
}

export function isOwnOrderByField(field: DMMF.Field) {
  return !isRelationField(field);
}

export function isOrderByField(field: DMMF.Field) {
  return !!field;
}
