generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

model RoomAttribute {
  id     Int                  @id @default(autoincrement())
  name   String               @unique
  values RoomAttributeValue[]
}

model RoomAttributeValue {
  id          Int    @id @default(autoincrement())
  roomId      Int
  attributeId Int
  value       String

  attribute RoomAttribute @relation(fields: [attributeId], references: [id])
  room      Room          @relation(fields: [roomId], references: [id])

  @@unique([roomId, attributeId])
}

model ItemAttribute {
  id     Int                  @id @default(autoincrement())
  name   String               @unique
  values ItemAttributeValue[]
}

model ItemAttributeValue {
  id          Int    @id @default(autoincrement())
  itemId      Int
  attributeId Int
  value       String

  attribute ItemAttribute @relation(fields: [attributeId], references: [id])
  item      Item          @relation(fields: [itemId], references: [id])

  @@unique([itemId, attributeId])
}

model Category {
  id       Int    @id @default(autoincrement())
  parentId Int?
  name     String @unique

  parent   Category?  @relation("children", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("children")
  items    Item[]
}

model Building {
  id   Int    @id @default(autoincrement())
  name String @unique
  code String @unique

  rooms Room[]
}

model Room {
  id         Int    @id @default(autoincrement())
  uuid       String @unique @default(uuid())
  buildingId Int
  name       String
  code       String @unique
  floor      Int    @default(0)

  building             Building              @relation(fields: [buildingId], references: [id])
  attributes           RoomAttributeValue[]
  quantities           Quantity[]
  serials              SerialNumber[]
  employeeRooms        EmployeeRoom[]
  employeeRoomRequests EmployeeRoomRequest[]
}

model Item {
  id               Int    @id @default(autoincrement())
  uuid             String @unique @default(uuid())
  categoryId       Int?
  name             String @unique
  description      String @default("")
  quantityTreshold Int    @default(0)

  category   Category?            @relation(fields: [categoryId], references: [id])
  attributes ItemAttributeValue[]
  quantities Quantity[]
  serials    SerialNumber[]
}

model Quantity {
  id               Int @id @default(autoincrement())
  roomId           Int
  itemId           Int
  quantity         Int @default(1)
  quantityTreshold Int @default(0)

  item Item @relation(fields: [itemId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  quantityMoveSources QuantityMoveRequest[] @relation("quantityMoveSources")
  quantityMoveTargets QuantityMoveRequest[] @relation("quantityMoveTargets")

  @@unique([roomId, itemId])
}

model SerialNumber {
  id           Int    @id @default(autoincrement())
  uuid         String @unique @default(uuid())
  serialNumber String @unique
  itemId       Int
  roomId       Int

  item Item @relation(fields: [itemId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  serialMoveSources SerialMoveRequest[] @relation("serialMoveSources")
  serialMoveTargets SerialMoveRequest[] @relation("serialMoveTargets")

  employeeItemRequests EmployeeItemRequest[]
  EmployeeItem         EmployeeItem[]
}

model QuantityMoveRequest {
  id            Int           @id @default(autoincrement())
  sourceId      Int
  targetId      Int
  requestedById Int
  approvedById  Int?
  quantity      Int?
  reason        String        @default("Not mentioned")
  status        RequestStatus @default(PENDING)

  requestedAt DateTime  @default(now())
  approvedAt  DateTime?

  source Quantity @relation("quantityMoveSources", fields: [sourceId], references: [id])
  target Quantity @relation("quantityMoveTargets", fields: [targetId], references: [id])

  requestedBy Employee  @relation("quantityMoveRequesters", fields: [requestedById], references: [id])
  approvedBy  Employee? @relation("quantityMoveApprovers", fields: [approvedById], references: [id])
}

model SerialMoveRequest {
  id            Int           @id @default(autoincrement())
  sourceId      Int
  targetId      Int
  requestedById Int
  approvedById  Int?
  reason        String        @default("Not mentioned")
  status        RequestStatus @default(PENDING)
  requestedAt   DateTime      @default(now())
  approvedAt    DateTime?

  source SerialNumber @relation("serialMoveSources", fields: [sourceId], references: [id])
  target SerialNumber @relation("serialMoveTargets", fields: [targetId], references: [id])

  requestedBy Employee  @relation("serialMoveRequesters", fields: [requestedById], references: [id])
  approvedBy  Employee? @relation("serialMoveApprovers", fields: [approvedById], references: [id])
}

model Employee {
  id   Int    @id @default(autoincrement())
  uuid String @unique

  rooms EmployeeRoom[]
  items EmployeeItem[]

  itemRequesters         EmployeeItemRequest[] @relation("itemRequesters")
  itemApprovers          EmployeeItemRequest[] @relation("itemApprovers")
  roomRequestors         EmployeeRoomRequest[] @relation("roomRequesters")
  roomApprovers          EmployeeRoomRequest[] @relation("roomApprovers")
  serialMoveRequesters   SerialMoveRequest[]   @relation("serialMoveRequesters")
  serialMoveApprovers    SerialMoveRequest[]   @relation("serialMoveApprovers")
  quantityMoveRequesters QuantityMoveRequest[] @relation("quantityMoveRequesters")
  quantityMoveApprovers  QuantityMoveRequest[] @relation("quantityMoveApprovers")
}

model EmployeeRoom {
  id         Int       @id @default(autoincrement())
  employeeId Int
  roomId     Int
  givenAt    DateTime  @default(now())
  takenAt    DateTime?

  room     Room     @relation(fields: [roomId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])

  @@unique([roomId, givenAt])
}

model EmployeeItem {
  id             Int @id @default(autoincrement())
  employeeId     Int
  serialNumberId Int

  givenAt DateTime  @default(now())
  takenAt DateTime?

  serialNumber SerialNumber @relation(fields: [serialNumberId], references: [id])
  employee     Employee     @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, serialNumberId, givenAt])
}

model EmployeeRoomRequest {
  id            Int           @id @default(autoincrement())
  roomId        Int?
  requestedById Int
  approvedById  Int?
  requestedAt   DateTime      @default(now())
  approvedAt    DateTime?
  status        RequestStatus @default(PENDING)
  note          String        @default("")

  room        Room?     @relation(fields: [roomId], references: [id])
  requestedBy Employee  @relation("roomRequesters", fields: [requestedById], references: [id])
  approvedBy  Employee? @relation("roomApprovers", fields: [approvedById], references: [id])
}

model EmployeeItemRequest {
  id             Int           @id @default(autoincrement())
  requestedById  Int
  approvedById   Int?
  requestedAt    DateTime      @default(now())
  approvedAt     DateTime?
  serialNumberId Int?
  status         RequestStatus @default(PENDING)
  note           String        @default("")

  serialNumber SerialNumber? @relation(fields: [serialNumberId], references: [id])
  requestedBy  Employee      @relation("itemRequesters", fields: [requestedById], references: [id])
  approvedBy   Employee?     @relation("itemApprovers", fields: [approvedById], references: [id])
}
