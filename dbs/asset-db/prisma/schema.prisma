generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

model Building {
  id   Int    @id @default(autoincrement())
  name String @unique
  code String @unique

  rooms Room[]
}

model RoomAttribute {
  id     Int                  @id @default(autoincrement())
  name   String               @unique
  values RoomAttributeValue[]
}

model RoomAttributeValue {
  id          Int    @id @default(autoincrement())
  roomId      Int
  attributeId Int
  value       String

  attribute RoomAttribute @relation(fields: [attributeId], references: [id])
  room      Room          @relation(fields: [roomId], references: [id])

  @@unique([roomId, attributeId])
}

model ItemAttribute {
  id     Int                  @id @default(autoincrement())
  name   String               @unique
  values ItemAttributeValue[]
}

model ItemAttributeValue {
  id          Int    @id @default(autoincrement())
  itemId      Int
  attributeId Int
  value       String

  attribute ItemAttribute @relation(fields: [attributeId], references: [id])
  item      Item          @relation(fields: [itemId], references: [id])

  @@unique([itemId, attributeId])
}

model Room {
  id         Int    @id @default(autoincrement())
  buildingId Int
  code       String
  floor      Int    @default(0)

  building   Building             @relation(fields: [buildingId], references: [id])
  attributes RoomAttributeValue[]
  quantities Quantity[]
  serials    SerialNumber[]

  @@unique([buildingId, code])
}

model Category {
  id       Int    @id @default(autoincrement())
  parentId Int?
  name     String @unique

  parent   Category?  @relation("children", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("children")
  items    Item[]
}

model Item {
  id               Int    @id @default(autoincrement())
  itemId           String @unique @default(uuid())
  categoryId       Int?
  name             String @unique
  description      String @default("")
  quantityTreshold Int    @default(0)

  category   Category?            @relation(fields: [categoryId], references: [id])
  attributes ItemAttributeValue[]
  quantities Quantity[]
  serials    SerialNumber[]
}

model Quantity {
  id               Int @id @default(autoincrement())
  roomId           Int
  itemId           Int
  quantity         Int @default(1)
  quantityTreshold Int @default(0)

  item Item @relation(fields: [itemId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  sources  QuantityMoveRequest[] @relation("sources")
  taragets QuantityMoveRequest[] @relation("targets")

  @@unique([roomId, itemId])
}

model SerialNumber {
  id           Int    @id @default(autoincrement())
  serialNumber String @unique
  itemId       Int
  roomId       Int

  item Item @relation(fields: [itemId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  targets SerialMoveRequest[] @relation("targets")
  sources SerialMoveRequest[] @relation("sources")
}

model QuantityMoveRequest {
  id          Int           @id @default(autoincrement())
  sourceId    Int
  targetId    Int
  quantity    Int
  reason      String        @default("Not mentioned")
  status      RequestStatus @default(PENDING)
  requestedBy String
  approvedBy  String?

  source Quantity @relation("sources", fields: [sourceId], references: [id])
  target Quantity @relation("targets", fields: [targetId], references: [id])
}

model SerialMoveRequest {
  id          Int           @id @default(autoincrement())
  sourceId    Int
  targetId    Int
  reason      String        @default("Not mentioned")
  status      RequestStatus @default(PENDING)
  requestedBy String
  approvedBy  String?

  source SerialNumber @relation("sources", fields: [sourceId], references: [id])
  target SerialNumber @relation("targets", fields: [targetId], references: [id])
}
