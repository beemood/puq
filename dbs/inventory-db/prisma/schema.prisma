generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// @child
model Department {
  id Int @id @default(autoincrement())

  name String @unique @db.VarChar(30)

  products Product[]
}

/// @child
model Category {
  id Int @id @default(autoincrement())

  name String @unique @db.VarChar(30)

  products Product[]
}

/// @child
model Attribue {
  id       Int                @id @default(autoincrement())
  name     String             @unique @db.VarChar(30)
  variants VariantAttribute[]
}

/// @map
model VariantAttribute {
  variantId  Int
  attribueId Int
  value      String

  /// @include @where
  attribute Attribue @relation(fields: [attribueId], references: [id])

  /// @include @where 
  variant Variant @relation(fields: [variantId], references: [id])

  @@unique([variantId])
}

/// @parent
model Product {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(uuid())
  categoryId   Int
  departmentId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  name        String  @unique @db.VarChar(30)
  description String? @default("No Description") @db.VarChar(1000)
  isActive    Boolean @default(true)

  /// @include 
  variants Variant[]

  /// @include @where
  category Category @relation(fields: [categoryId], references: [id])

  /// @include @where
  department Department @relation(fields: [departmentId], references: [id])
}

/// @parent Product variant 
model Variant {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique @default(uuid())
  productId   Int
  sku         String  @unique @db.VarChar(13)
  upc         String  @unique @db.VarChar(13)
  description String? @default("No Description") @db.VarChar(1000)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  /// @include @where
  prices  Price[]

  /// @include @where
  quantities Quantity[]

  /// @include @where
  serialNumbers SerialNumber[]

  /// @include @where
  attributes VariantAttribute[]
}

/// @child
model Currency {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(30)
  code        String       @unique @db.VarChar(10)
  symbol      String?      @db.VarChar(4)
  priceLevels PriceLevel[]
}

/// @child 
model PriceLevel {
  id          Int      @id @default(autoincrement())
  currencyId  Int
  name        String   @unique @db.VarChar(30)
  description String?  @default("No Description") @db.VarChar(1000)
  taxrate     Decimal  @default(0) @db.Decimal(10, 4)
  currency    Currency @relation(fields: [currencyId], references: [id])
  stores      Store[]
  prices      Price[]
}

/// @child
model Price {
  id           Int     @id @default(autoincrement())
  variantId    Int
  priceLevelId Int
  price        Decimal @db.Decimal(10, 2)
  cost         Decimal @db.Decimal(10, 2)
  description  String? @default("No Description") @db.VarChar(1000)

  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  /// @include @where
  priceLevel PriceLevel @relation(fields: [priceLevelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([variantId, priceLevelId])
}

/// @child
model Quantity {
  id             Int     @id @default(autoincrement())
  variantId      Int
  storeId        Int
  quantity       Int
  alertThreshold Int?
  variant        Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  store          Store   @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([variantId, storeId])
}

/// @child
model SerialNumber {
  id           Int     @id @default(autoincrement())
  variantId    Int
  storeId      Int
  serialNumber String  @unique
  inStock      Boolean @default(true)

  /// @include @where
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  /// @include @where
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([variantId, storeId])
}

/// @parent 
model Store {
  id            Int            @id @default(autoincrement())
  priceLevelId  Int
  name          String         @unique @db.VarChar(30)
  description   String?        @default("No Description") @db.VarChar(1000)
  /// @include @where
  priceLevel    PriceLevel     @relation(fields: [priceLevelId], references: [id])
  quantities    Quantity[]
  serialNumbers SerialNumber[]
}
