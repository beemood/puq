generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Discount value type percent or fixed
enum DiscountValueType {
  /// Enforce percent value between 0 between 100
  PERCENT

  /// Enforce currency between 0 to maximum allowed discount
  FIXED
}

/// Discount type  VOLUME, FREE_SHIPPING, ORDER_TOTAL
enum DiscountType {
  /// Discount applied directly to target without any volume or amount condition
  SIMPLE

  /// Volumne discount such as 10 or more items %10 discount
  VOLUME

  /// Free shipping service discount
  FREE_SHIPPING

  /// Apply discount when it reaches out to to a certain amount such as %10 discount for $200 total
  ORDER_TOTAL
}

enum TimeUnit {
  SECOND
  MINUTE
  HOUR
  DAY
  MONTH
  YEAR
  DECADE
}

/// Product category to group products 
model Category {
  id Int @id @default(autoincrement())

  /// Categories might have parent category
  parentId Int?

  /// Unique category name
  name String @unique

  /// Unique url friendly version of the category name
  slug String @unique

  /// Parent category
  parent Category? @relation("SubCategories", fields: [parentId], references: [id])

  /// List of sub categories
  children Category[] @relation("SubCategories")

  /// List of products in this category
  products ProductCategory[]

  /// List of discounts for this category
  discountTargets DiscountTarget[]
}

/// Main common product table
model Product {
  id Int @id @default(autoincrement())

  /// Product uuid for external identification
  uuid String @unique @default(uuid())

  /// Unique product name
  name String @unique

  /// Unique url friendly product name (kebab case with NO special characters)
  slug String @unique

  /// Product description
  description String? @default("No description")

  /// List of product variants 
  variants Variant[]

  /// List of categories that the product falls into.
  categories ProductCategory[]

  /// List of product images
  images Image[]

  /// List of product suppliers. Product might be supplied by multiple suppliers
  suppliers Supplier[]

  /// List of discounts that are applicable to this product. You can control discounts in price-level, store, and variant as well.
  discounts DiscountTarget[]

  /// List of warranties that the product falls into.
  warranties ProductWarranty[]
}

/// Product image
model Image {
  id Int @id @default(autoincrement())

  /// Product id
  productId Int

  /// Image url
  url String

  /// Order of the image. This field allows you to list product images in desired order.
  order Int @default(0)

  /// Image description such as "from-left", "from-right", "top", "bottom"
  description String? @default("No description")

  /// Product 
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// Product supplier
model Supplier {
  id Int @id @default(autoincrement())

  /// External supplier uuid which migth be used by contact service
  uuid String @unique @default(uuid())

  /// Product id
  productId Int?

  /// The sku defiend by the supplier which helps us to indentify the product during reordering process.
  supplierSku String

  /// Product cost 
  supplierCost Decimal? @db.Decimal(10, 2)

  /// How long does it takes to get the products
  leadTimeDays Int?

  /// Product
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

/// Product category
model ProductCategory {
  id Int @id @default(autoincrement())

  /// Product id
  productId Int

  /// Category id
  categoryId Int

  /// Product 
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  /// Category
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// Product variant 
model Variant {
  id Int @id @default(autoincrement())

  /// Unique product uuid for external usages such as in crm application
  uuid String @unique @default(uuid())

  /// Product id
  productId Int

  /// Unique variant sku
  sku String @unique

  /// Unique product barcode/upc/ean
  upc String @unique

  /// Parent product 
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  /// List of attributes such as color, make, model, size, length etc.
  attributes AttributeValue[]

  /// List of pricess of this variant in the price-levels
  prices Price[]

  /// List of stock/quantity information of this variant in the stores.
  quantities Quantity[]

  /// List of discounts applicable to this variant
  discounts DiscountTarget[]

  /// List of serial numbers. 
  serrialNumbers SerialNumber[]

  /// List of warranties applicable to this product/variant
  warranties ProductWarranty[]
}

model AttributeCategory {
  id Int @id @default(autoincrement())

  /// Unique attribute category name such as Common, Size, etc.
  name String @unique

  /// Unique url friend attribute-category name
  slug String @unique

  /// List of attribute under this attribute category
  attributes Attribute[]
}

model Attribute {
  id Int @id @default(autoincrement())

  /// Optional attribute category id
  categoryId Int?

  /// Unique attribute name such as color, length, ram, capacity, brand etc.
  name String @unique

  /// Attribute description such as "The capacity of the storeage (harddisk-capacity)"
  description String? @default("No description")

  /// Attribute category
  category AttributeCategory? @relation(fields: [categoryId], references: [id])

  /// List of available attribute unites such as "m", "mm", "MB", "GB", "g", "kg" etc
  unites AttributeUnit[]

  /// List of attribute values
  values AttributeValue[]
}

/// Attribute unit
model Unit {
  id Int @id @default(autoincrement())

  /// Unique unit name
  name String @unique

  /// Unit symbol such as "m", "$" etc.
  symbol String

  /// List of attributes-units
  attributes AttributeUnit[]
}

model AttributeUnit {
  id Int @id @default(autoincrement())

  /// Attribute id
  attributeId Int

  /// Unit id
  unitId Int

  /// Attribute 
  attribute Attribute @relation(fields: [attributeId], references: [id])

  /// Unit
  unit Unit @relation(fields: [unitId], references: [id])
}

/// Attribute value
model AttributeValue {
  id Int @id @default(autoincrement())

  /// Attribute id
  attributeId Int

  /// Product variant id
  variantId Int

  /// Value as string 
  textValue String?

  /// Value as boolean
  booleanValue Boolean?

  /// Value as floating number
  floatValue Float?

  /// Variant 
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  /// Attribute 
  attribute Attribute @relation(fields: [attributeId], references: [id])

  @@unique([attributeId, variantId])
}

model Currency {
  id Int @id @default(autoincrement())

  /// Currency name suchas "American Dolor"
  name String

  /// Currency code such as "USD"
  code String

  /// Currency symbol such as "$"
  symbol String?

  /// List of price levels that uses this currency type
  priceLevels PriceLevel[]

  @@unique([name, code])
}

/// Price levels. Price levels allows us to create multiple prices based on differnt taxrate, vip customers, or any other specific conditions such as family-price, friend-price, veteran-price, none-profit-price etc.
model PriceLevel {
  id Int @id @default(autoincrement())

  /// Currency id
  currencyId Int

  /// Unique price level name
  name String @unique

  /// Unique url friendly price-level name
  slug String @unique

  /// Taxrate 
  taxrate Decimal @db.Decimal(10, 4)

  /// Notes and description 
  notes String?

  /// Currency 
  currency Currency @relation(fields: [currencyId], references: [id])

  /// List of stores using this price-level by default
  stores Store[]

  /// List of prices using this price-level
  prices Price[]

  /// List of discount using this price-level
  discounts DiscountTarget[]
}

/// Product/Variant price
model Price {
  id Int @id @default(autoincrement())

  /// Variant id
  variantId Int

  /// Price level id
  priceLevelId Int

  /// Sales price
  price Decimal @db.Decimal(10, 2)

  /// Cost
  cost Decimal @db.Decimal(10, 2)

  /// Price description
  description String? @default("No description")

  /// Variant 
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  /// Price level
  priceLevel PriceLevel @relation(fields: [priceLevelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// Product/Variant quantity 
model Quantity {
  id Int @id @default(autoincrement())

  /// Variant id
  variantId Int

  /// Store id
  storeId Int

  /// Quantity 
  quantity Int

  /// Threshold to reorder the prduct 
  alertThreshold Int?

  /// Product variant 
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  /// Store
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([variantId, storeId])
}

/// Product/variant serial number. This is not for all products/variants. In case you need to track each product/variant specificly then use this table.
model SerialNumber {
  id Int @id @default(autoincrement())

  /// Variant id
  variantId Int

  /// Store id
  storeId Int

  /// Unique serial number 
  serialNumber String @unique

  /// In stock or not
  inStock Boolean

  /// Variant details
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  /// Store details
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// Discount/promotion table
model Discount {
  id Int @id @default(autoincrement())

  ///	The unique promotional code (e.g., "FALL20", "BUY2GET1").
  code String @unique

  /// Discount type (VOLUME, FREE_SHIPPING, ORDER_TOTAL)
  type DiscountType

  /// Discount value type (FIXED, PERCENT)
  valueType DiscountValueType

  ///	The amount or percentage to discount (e.g., 0.20 for 20% or 10.00 for a $10 off).
  value Decimal? @db.Decimal(10, 2)

  ///	Minimum number of items required to apply the discount
  minQuantity Int?

  /// Maximum number of items required to apply the discount
  maxQuantity Int?

  /// Minimum order total amount required to apply the discount
  minOrderTotal Decimal? @db.Decimal(10, 2)

  /// Maximum order total amount required to apply the discount
  maxOrderTotal Decimal? @db.Decimal(10, 2)

  ///	When the promotion becomes active.
  startDate DateTime?

  ///	When the promotion expires.
  endDate DateTime?

  ///	Maximum number of times this discount can be used
  usageLimit Int?

  /// Number of times this discount is applied
  usageCount Int @default(0)

  /// List of product/variant targets that have this discount
  targets DiscountTarget[]
}

/// Discount target table
model DiscountTarget {
  id Int @id @default(autoincrement())

  /// Discount id
  discountId Int

  // Optional product id when you want to discount all variant of the product
  productId Int?

  // Optional variant id when you want to discount only a single product variant
  variantId Int?

  /// Optional store id when you want to discount only in a single store
  storeId Int?

  /// Optional price-level id when you want to discount only in a single price-level group such as "family-price", "friend-price", "employee-price", "wholesale-price" etc.
  priceLevelId Int?

  /// Optional category when you want to discount all products under this category 
  categoryId Int?

  /// Dicount details
  discount Discount @relation(fields: [discountId], references: [id])

  /// Product details
  product Product? @relation(fields: [productId], references: [id])

  /// Variant details
  variant Variant? @relation(fields: [variantId], references: [id])

  /// Store details
  store Store? @relation(fields: [storeId], references: [id])

  /// Price level details
  priceLevel PriceLevel? @relation(fields: [priceLevelId], references: [id])

  /// Category details
  category Category? @relation(fields: [categoryId], references: [id])

  @@unique([discountId, productId, variantId, storeId, priceLevelId, categoryId])
}

/// Store 
model Store {
  id Int @id @default(autoincrement())

  /// Default price level
  priceLevelId Int

  /// Unique store name
  name String @unique

  /// Unique url friendly store name
  slug String @unique

  /// Store description
  description String? @default("No description")

  /// Default price level details
  priceLevel PriceLevel @relation(fields: [priceLevelId], references: [id])

  /// List of product/variant quantities in this store
  quantities Quantity[]

  /// List of discounts in this store
  discounts DiscountTarget[]

  /// List of product/variant serial nubmers in this store
  serialNumbers SerialNumber[]
}

/// Product warranty policy
model WarrantyPolicy {
  id Int @id @default(autoincrement())

  /// Warranty policy name
  name String @unique

  /// Warranty policy description 
  description String? @default("No description")

  /// Warranty duration such as 1 (YEAR), 6 (MONTH) etc. 
  duration Int

  /// Duration type such as  YEAR, MONTH, DECADE, DAY
  durationUnit TimeUnit @default(YEAR)

  /// List of products that have this wrranty policy
  products ProductWarranty[]
}

/// Product/variant warranty table
model ProductWarranty {
  id Int @id @default(autoincrement())

  /// Optional product id when all product variants under the same warranty
  productId Int?

  /// Optional product id when a variant has the warranty
  variantId Int?

  /// Wrannty policy id
  policyId Int

  /// Product details
  product Product? @relation(fields: [productId], references: [id])

  /// Variant details
  variant Variant? @relation(fields: [variantId], references: [id])

  /// Policy details
  policy WarrantyPolicy @relation(fields: [policyId], references: [id])
}
