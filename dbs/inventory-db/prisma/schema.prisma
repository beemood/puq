generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

generator zod {
  provider = "zod-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name        String  @unique @db.VarChar(30)
  slug        String
  description String? @db.VarChar(1000)

  Quantities    Quantity[]
  SerialNumbers SerialNumber[]
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  parentId    Int?
  name        String  @unique @db.VarChar(30)
  slug        String
  description String? @db.VarChar(1000)

  Category   Category?  @relation("Categories", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  Categories Category[] @relation("Categories")
  Products   Product[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name        String  @unique @db.VarChar(30)
  slug        String
  description String? @db.VarChar(1000)

  ProductTags ProductTag[]
}

model ProductTag {
  id        String @unique @default(uuid(7))
  productId Int
  tagId     Int

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Product {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  parentId    Int?
  name        String  @unique @db.VarChar(30)
  slug        String
  description String? @db.VarChar(1000)
  upc         String  @unique @db.VarChar(30)
  sku         String  @unique @db.VarChar(30)
  categoryId  Int?
  active      Boolean @default(true)

  Parent        Product?       @relation("Variants", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Variants      Product[]      @relation("Variants")
  Category      Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  ProductTags   ProductTag[]
  Prices        Price[]
  Quantities    Quantity[]
  SerialNumbers SerialNumber[]
}

model PriceLevel {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name        String  @unique @db.VarChar(30)
  slug        String
  description String? @db.VarChar(1000)
  taxrate     Decimal @db.Decimal(3, 2)

  Prices Price[]
}

model Price {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  productId    Int
  priceLevelId Int
  price        Decimal @db.Decimal(10, 2)

  Product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PriceLevel PriceLevel @relation(fields: [priceLevelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Quantity {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  storeId     Int
  productId   Int
  quantity    Int
  minQuantity Int

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SerialNumber {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  storeId      Int
  productId    Int
  serialNumber String  @unique @db.VarChar(100)
  inStock      Boolean @default(true)

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
