generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Industry {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  slug        String  @unique
  description String?

  orgs OrgIndustry[]
}

model Org {
  id   Int    @id @default(autoincrement())
  uuid String @default(uuid())
  name String @unique
  slug String @unique

  agents     Agent[]
  industries OrgIndustry[]
}

model OrgIndustry {
  id         Int @id @default(autoincrement())
  orgId      Int
  industryId Int

  industry     Industry @relation(fields: [industryId], references: [id])
  organization Org      @relation(fields: [orgId], references: [id])

  @@unique([orgId, industryId])
}

enum Gender {
  MALE
  FEMALE
}

model Occupation {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  agents Agent[]
}

model Agent {
  id           Int     @id @default(autoincrement())
  orgId        Int?
  occupationId Int?
  firstName    String
  middleName   String?
  lastName     String
  gender       Gender?
  slug         String  @unique

  note String?

  org        Org?        @relation(fields: [orgId], references: [id])
  contacts   Contact[]
  occupation Occupation? @relation(fields: [occupationId], references: [id])
}

enum ContactType {
  WORK
  HOME
  PRIMARY
}

model Contact {
  id      Int         @id @default(autoincrement())
  agentId Int
  uuid    String      @unique @default(uuid())
  type    ContactType

  emails    Email[]
  phones    Phone[]
  addresses Address[]
  websites  Website[]
  agent     Agent     @relation(fields: [agentId], references: [id])

  order Int?

  @@unique([agentId, order])
}

model State {
  id        Int    @id @default(autoincrement())
  countryId Int
  state     String
  code      String

  country Country @relation(fields: [countryId], references: [id])
  cities  City[]
}

model Country {
  id      Int    @id @default(autoincrement())
  country String
  code    String

  states State[]
}

model City {
  id      Int    @id @default(autoincrement())
  stateId Int
  city    String

  state     State     @relation(fields: [stateId], references: [id])
  addresses Address[]
}

model Address {
  id        Int    @id @default(autoincrement())
  contactId Int
  cityId    Int
  street    String
  zip       String

  city    City    @relation(fields: [cityId], references: [id])
  contact Contact @relation(fields: [contactId], references: [id])

  order Int?

  @@unique([contactId, order])
  @@unique([contactId, cityId, street])
}

model Email {
  id        Int    @id @default(autoincrement())
  contactId Int
  email     String

  contact Contact @relation(fields: [contactId], references: [id])

  order Int?

  @@unique([contactId, order])
  @@unique([contactId, email])
}

model Phone {
  id        Int    @id @default(autoincrement())
  contactId Int
  phone     String

  contact Contact @relation(fields: [contactId], references: [id])

  order Int?

  @@unique([contactId, order])
  @@unique([contactId, phone])
}

model Website {
  id        Int    @id @default(autoincrement())
  contactId Int
  url       String

  contact Contact @relation(fields: [contactId], references: [id])

  order Int?

  @@unique([contactId, order])
  @@unique([contactId, url])
}
