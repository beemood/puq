generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContactType {
  /// This contact information is used for filing taxes
  RESIDENCE_ADDRESS

  /// Any other work contact
  WORK

  /// Emergency 
  EMERGENCY

  /// Other
  OTHER
}

/// Person gender
enum Gender {
  MALE
  FEMALE
  OTHER
}

/// Signle or married
enum MaritalStatus {
  SINGLE
  MARRIED
}

/// Federal income tax filing status
enum TaxFilingStatus {
  SINGLE
  MARRIED_FILING_JOINTLY
  MARRIED_FILING_SEPARATELY
  HEAD_OF_HOUSEHOLD
  QUALIFYING_WIDOW
}

/// Type of deduction (Pre-Tax, Post-Tax, Garnishment)
enum DeductionType {
  STATUTORY_PRE_TAX // e.g., Retirement (401k), Health Savings Account (HSA)
  NON_STATUTORY_PRE_TAX // e.g., Health Insurance premiums
  POST_TAX // e.g., Roth 401k, Life Insurance
  GARNISHMENT // e.g., Child support, IRS levy
}

/// Employee status (INCOMMING, ACTIVE, INACTIVE, LEFT, TERMINATED)
enum EmployeeStatus {
  /// Employees are comming in the next business cycle
  INCOMMING

  /// Active employee 
  ACTIVE

  /// Inactive employee for vacation
  INACTIVE

  /// Employees who left the company
  LEFT

  /// Employees who are terminated
  TERMINATED
}

/// Employement type 
enum EmploymentType {
  /// Full time employee
  FULL_TIME

  /// Partime employee 
  PART_TIME

  /// External contractors
  CONTRACTOR

  /// Interns or guests who are taking training 
  INTERN
}

/// Pay frenquencies (ANNUAL, MONTHLY, BI_WEEKLY, WEEKLY, HOURLY)
enum PayFrequency {
  /// Yearly
  ANNUAL

  /// Montly
  MONTHLY

  /// Once in two weeks
  BI_WEEKLY

  /// Weekly
  WEEKLY

  /// Hourly
  HOURLY
}

enum TitleChangeType {
  /// When employee is moving to a higher ranked title
  PROMOTION

  /// When employee is moving to a same ranked title or low ranked title
  TRANSFER

  /// When employee is moving to a same ranked title or low ranked title
  OTHER
}

enum RequestStatus {
  /// Request is waiting for review and resolving
  PENDING

  /// Request is approved by the manager
  APPROVED

  /// Request is rejected by the manager
  REJECTED

  /// Request is canceled by the requester
  CANCELED
}

enum BenefitStatus {
  /// The employee is currently covered by the benefit plan. The plan is in force and deductions are being taken (if applicable).	Inactive, Terminated
  ACTIVE

  /// The employee has made their selection, but coverage has not yet begun. This is common during the waiting period, or while the plan carrier/administrator is processing the enrollment (e.g., waiting for proof of eligibility or evidence of insurability).	Active, Denied, Canceled
  PENDING

  /// Specifically for benefits like voluntary life insurance where the employee must submit Evidence of Insurability (a medical questionnaire or exam) for approval before coverage can begin.	Pending (EOI Approved), Denied (EOI Denied)
  AWAITING_EOI

  /// The employee was eligible for the benefit but explicitly chose not to enroll in it.	Enrolled (during a future open enrollment or qualifying life event)
  WAIVED

  /// A general status meaning the employee has successfully signed up for the benefit. This often encompasses both Pending and Active periods but can be a transitional status before becoming Active.	Active
  ENROLLED
}

enum PayrollStatus {
  DRAFT
  CALCULATED
  APPROVED
  PAID
  CLOSED
}

enum TimeOffTransactionType {
  ACCRUAL
  USED_REQUEST
  ROLLOVER
  ADJUSTMENT
  OTHER
}

model Department {
  id Int @id @default(autoincrement())

  /// Parent department id
  parentId Int?

  /// Unique department name
  name String @unique

  //// Unique url friendly department name
  slug String @unique

  /// Is this department active
  isActive Boolean @default(true)

  /// Parent department details 
  parent Department? @relation("departments", fields: [parentId], references: [id])

  /// List of sub department details
  departments Department[] @relation("departments")

  /// List of titles under this department
  titles Title[]
}

model Title {
  id Int @id @default(autoincrement())

  /// Department id
  departmentId Int

  /// Unqiue title name such as Fullstack software developer
  name String @unique

  /// Unqiue url friendly title name
  slug String @unique

  /// Title description
  description String? @default("No Description")

  /// Is this title active?
  isActive Boolean @default(true)

  /// Department details
  department Department @relation(fields: [departmentId], references: [id])

  /// List of employees who have this title
  employees Employee[]

  /// List of title histories of employees
  histories TitleHistory[]
}

/// Encripted personal data
model PersonalData {
  id Int @id @default(autoincrement())

  /// Employee d
  employeeId Int @unique

  /// Social security or ein
  ein String

  /// Gender 
  gender Gender

  /// Date of birth 
  dob DateTime @db.Date()

  /// Married or single
  maritalStatus MaritalStatus

  /// Employee details
  employee Employee @relation("personalData", fields: [employeeId], references: [id], onDelete: Cascade)
}

/// Employee table 
model Employee {
  id Int @id @default(autoincrement())

  /// Unique employee uuid for external usage such as contact, auth, and inventory services to identify the user
  uuid String @unique @default(uuid())

  /// Employee title id 
  titleId Int

  /// firstName 
  firstName String

  /// middleName 
  middleName String?

  /// lastName 
  lastName String

  /// preferedName 
  preferedName String?

  /// Empmloyee status
  status EmployeeStatus @default(INCOMMING)

  /// Employee title details 
  title Title @relation(fields: [titleId], references: [id])

  /// The date the employee is hired at
  hireDate DateTime?

  /// The date the employee is terminated at
  terminationDate DateTime?

  /// Employment type
  employmentType EmploymentType

  /// Salary details
  salary Salary?

  /// Salary history details
  salaryHistory SalaryHistory[]

  /// List of benefits given to this employee
  benefits BenefitEnrolment[]

  /// List of title history for this employee
  titleHistory TitleHistory[]

  /// List of time off balances
  timeOffBalances TimeOffBalance[]

  /// List of time off requests made by this employee 
  timeOffRequests TimeOffRequest[]

  // List of time-offs that this employee (manager) resolved
  resolvedTimeOffs TimeOffRequest[] @relation("resolvedTimeOffs")

  /// List of clock-ins
  clockIns ClockIn[]

  /// Employee encrypted personal data
  personalData PersonalData? @relation("personalData")

  /// Employee tax data
  taxData EmployeeTaxData[]

  /// The list of teams that this employee is in
  memberships TeamMember[]

  /// List of teams that this employee manages
  managingTeams TeamManager[]

  /// List of employees managed by this employee
  managingEmployees Employee[] @relation("managingEmployees")

  /// The employee details of the direct manager of this employee
  directManager Employee? @relation("managingEmployees", fields: [directManagerId], references: [id])

  /// List of paychecks paid to this employee
  paychecks Paycheck[]

  directManagerId Int?

  /// List of deductions
  deductions EmployeeDeduction[]

  /// List of resolved payroll runs
  resolvedPayrollRuns PayrollRun[]

  /// Contact details
  contact Contact?
}

model Team {
  id Int @id @default(autoincrement())

  /// Unique team name
  name String @unique

  /// List of team member details
  members TeamMember[]

  /// List of team managers
  managers TeamManager[]
}

model TeamManager {
  id Int @id @default(autoincrement())

  /// Team id
  teamId Int

  /// Manager id
  managerId Int

  /// Team details
  team Team @relation(fields: [teamId], references: [id])

  /// Manager details
  manager Employee @relation(fields: [managerId], references: [id])

  @@unique([teamId, managerId])
}

model TeamMember {
  id Int @id @default(autoincrement())

  /// Team id
  teamId Int

  /// Team member employee id
  memberId Int

  /// Member/employee details
  member Employee @relation(fields: [memberId], references: [id])

  /// Team details
  team Team @relation(fields: [teamId], references: [id])
}

/// Employee salary
model Salary {
  id Int @id @default(autoincrement())

  /// Employee id
  employeeId Int @unique

  /// Gross salary
  gross Decimal @db.Decimal(10, 2)

  /// Effective date of the salary
  startDate DateTime @db.Date()

  /// End date of the slary
  endDate DateTime? @db.Date()

  /// Pay frequency such as ANNUAL, WEEKLY, HOURLY etc.
  frequency PayFrequency

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])
}

/// Employee salary history
model SalaryHistory {
  id Int @id @default(autoincrement())

  /// Employee id
  employeeId Int

  /// Salary change date
  createdAt DateTime @default(now())

  /// Old salary
  oldSalary Decimal @db.Decimal(10, 2)

  /// New salary
  newSalary Decimal @db.Decimal(10, 2)

  /// Change reson
  reason String?

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])
}

/// Employee benefits
model Benefit {
  id Int @id @default(autoincrement())

  /// Unqiue benefit name
  name String @unique

  /// Benefit description
  description String? @default("No Description")

  /// Benefit type 
  type String?

  /// List of enrolments/employees getting this benefit
  enrolments BenefitEnrolment[]
}

/// Benefit entrolment table
model BenefitEnrolment {
  id Int @id @default(autoincrement())

  /// Benefit id
  benefitId Int

  /// Employee id
  employeeId Int

  /// Benefit start date
  startDate DateTime

  /// Benefit status
  status BenefitStatus @default(PENDING)

  /// Benefit details
  benefit Benefit @relation(fields: [benefitId], references: [id])

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])

  @@unique([benefitId, employeeId])
}

/// Employee title hsitory table
model TitleHistory {
  id Int @id @default(autoincrement())

  /// Employee id
  employeeId Int

  /// Title id
  titleId Int

  /// Poistion change type 
  type TitleChangeType

  /// Reason for title change
  reason String?

  /// Start date for this title
  startDate DateTime

  /// End date for this poistion 
  endDate DateTime?

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])

  /// Title details
  title Title @relation(fields: [titleId], references: [id])

  @@unique([employeeId, startDate])
}

model TimeOffPolicy {
  id Int @id @default(autoincrement())

  /// Unique time off policy name
  name String @unique

  /// Policy description 
  description String? @default("No description")

  /// Accrual rate such as 0.04 which means employee earns 0.04 hours for each hour work
  accrualRate Decimal @db.Decimal(8, 2) // e.g., 0.04 hours per hour worked

  /// Maximum time-off hours can be used in the following business cycle
  maxRollover Decimal @db.Decimal(8, 2)

  /// List of employees time-off balance
  balances TimeOffBalance[]

  /// List of employees time-off requests
  requests TimeOffRequest[]
}

/// Employee time-off balance table
model TimeOffBalance {
  id Int @id @default(autoincrement())

  /// Policy id
  policyId Int

  /// Employee id
  employeeId Int

  /// Earned time-off hours
  accruedHours Decimal @db.Decimal(8, 2)

  /// Used time-off hours
  usedHours Decimal @db.Decimal(8, 2)

  /// Available time-off hours
  availableHours Decimal @db.Decimal(8, 2)

  /// Policy details
  policy TimeOffPolicy @relation(fields: [policyId], references: [id])

  /// Emplyee details 
  employee Employee @relation(fields: [employeeId], references: [id])

  /// Transactions/TimeOff logs
  transactions TimeOffTransaction[]

  @@unique([employeeId, policyId])
}

/// Time-off request table
model TimeOffRequest {
  id Int @id @default(autoincrement())

  /// The date the entry is created at.
  createdAt DateTime @default(now())

  /// Employee id
  employeeId Int

  /// Reason for the time-off request
  reason String

  /// Policy id
  policyId Int

  /// The id of the employee who resolved this request
  resolverId Int?

  /// Request status 
  status RequestStatus @default(PENDING)

  /// Desired start time for the time-off
  startDate DateTime @db.Date()

  /// Desired end time for the time-off
  endDate DateTime @db.Date()

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])

  /// Policy details
  policy TimeOffPolicy @relation(fields: [policyId], references: [id])

  /// The details of the employee who resolved this request
  resolver Employee? @relation("resolvedTimeOffs", fields: [resolverId], references: [id])

  /// The transaction details for this requst upon if approved.
  transactions TimeOffTransaction[]
}

/// Time-off transaction/log table
model TimeOffTransaction {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  type TimeOffTransactionType

  /// Employee time-off balance entry id
  balanceId Int

  /// Request id
  requestId Int?

  /// Hourly approved amounts
  amount Decimal @db.Decimal(8, 2)

  /// Balance details
  balance TimeOffBalance @relation(fields: [balanceId], references: [id])

  /// Request details
  request TimeOffRequest? @relation(fields: [requestId], references: [id])
}

model ClockIn {
  id Int @id @default(autoincrement())

  /// Employee id
  employeeId Int

  /// Time to enter the office
  clockIn DateTime @default(now())

  /// Time to leave the office
  clockOut DateTime?

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, clockIn])
}

/// Timely payment logs.
model Paycheck {
  id Int @id @default(autoincrement())

  /// The date the entiry is created at
  createdAt DateTime @default(now())

  /// Payrool run id
  payrollRunId Int

  /// The date the entry is updated at
  updatedAt DateTime @updatedAt

  /// Employee id
  employeeId Int

  /// Gross amount
  grossAmount Decimal @db.Decimal(10, 2)

  ///  Net amount
  netAmount Decimal @db.Decimal(10, 2)

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])

  earnings Earning[]

  paycheckTaxes PaycheckTax[]

  deductions PaycheckDeduction[]

  /// Payroll run details
  payrollRun PayrollRun @relation(fields: [payrollRunId], references: [id])
}

enum EarningType {
  REGULAR
  BONUS
  OVERTIME
  OTHER
}

model Earning {
  id         Int         @id @default(autoincrement())
  type       EarningType
  hours      Decimal?
  rate       Decimal
  amount     Decimal     @db.Decimal(20, 2)
  paycheckId Int
  paycheck   Paycheck    @relation(fields: [paycheckId], references: [id])
}

model PaycheckTax {
  id Int @id @default(autoincrement())

  paycheckId Int

  taxAuthority String

  amount Decimal @db.Decimal(10, 2)

  paycheck Paycheck @relation(fields: [paycheckId], references: [id])
}

model DeductionPolicy {
  id Int @id @default(autoincrement())

  name String

  type DeductionType

  defaultAmount Decimal? @db.Decimal(10, 2)

  defaultPercent Decimal?

  employeeDeductions EmployeeDeduction[]
}

model EmployeeDeduction {
  id         Int @id @default(autoincrement())
  employeeId Int
  policyId   Int

  employeeAmount Decimal? @db.Decimal(10, 2)

  employee           Employee            @relation(fields: [employeeId], references: [id])
  policy             DeductionPolicy     @relation(fields: [policyId], references: [id])
  paycheckDeductions PaycheckDeduction[]
}

model PaycheckDeduction {
  id                  Int               @id @default(autoincrement())
  paycheckId          Int
  employeeDeductionId Int
  amount              Decimal           @db.Decimal(10, 2)
  paycheck            Paycheck          @relation(fields: [paycheckId], references: [id])
  employeeDeduction   EmployeeDeduction @relation(fields: [employeeDeductionId], references: [id])
}

/// Stores employee tax withholding settings from Form W-4 and state forms
model EmployeeTaxData {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  startDate DateTime @db.Date()

  endDate DateTime? @db.Date()

  /// Employee ID (1:1 relationship)
  employeeId Int

  // --- FEDERAL TAX SETTINGS ---
  federalStatus TaxFilingStatus @default(SINGLE)

  /// Total dollar amount from W-4 Step 3 (Claim Dependents)
  dependentsCredit Decimal @default(0.00) @db.Decimal(10, 2)

  /// Flag indicating multiple jobs checked on W-4 Step 2
  multipleJobs Boolean @default(false)

  /// Total dollar amount from W-4 Step 4(a) (Other Income)
  otherIncome Decimal @default(0.00) @db.Decimal(10, 2)

  /// Total dollar amount from W-4 Step 4(b) (Deductions)
  deductionsAmount Decimal @default(0.00) @db.Decimal(10, 2)

  /// Additional flat amount to withhold per pay period (W-4 Step 4(c))
  extraWithholding Decimal @default(0.00) @db.Decimal(10, 2)

  /// Flag for employees exempt from federal income tax withholding
  isExempt Boolean @default(false)

  /// Flag for Non-Resident Alien status (affects special withholding rules)
  isNonResidentAlien Boolean @default(false)

  // --- STATE AND LOCAL TAX SETTINGS ---
  /// Tax configurations for specific states/localities
  stateTaxes StateTaxWithholding[]

  /// List of local taxes
  localTaxes LocalTaxWithholding[]

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, createdAt])
}

/// Stores state-specific withholding details
model StateTaxWithholding {
  id Int @id @default(autoincrement())

  /// Link to the main EmployeeTaxData record
  taxDataId Int

  /// State code (e.g., 'IL', 'CA')
  stateCode String

  /// State-specific filing status/marital status
  stateStatus String?

  /// Number of state-level allowances/exemptions claimed
  allowances Int @default(0)

  /// Additional state withholding amount
  extraWithholding Decimal @default(0.00) @db.Decimal(10, 2)

  /// Employee tax data details
  taxData EmployeeTaxData @relation(fields: [taxDataId], references: [id])

  @@unique([taxDataId, stateCode])
}

/// Stores local/city/school district withholding details
model LocalTaxWithholding {
  id Int @id @default(autoincrement())

  /// Link to the main EmployeeTaxData record
  taxDataId Int

  /// Jurisdiction name or ID (e.g., City of Chicago, School District 186)
  jurisdiction String

  /// Local filing status/allowances
  localStatus String?

  /// Additional local withholding amount
  extraWithholding Decimal @default(0.00) @db.Decimal(10, 2)

  /// employee tax data details
  taxData EmployeeTaxData @relation(fields: [taxDataId], references: [id])

  @@unique([taxDataId, jurisdiction])
}

model PayrollRun {
  id Int @id @default(autoincrement())

  resolverId Int

  startDate DateTime @db.Date()

  endDate DateTime @db.Date()

  payDate DateTime @db.Date()

  status PayrollStatus @default(DRAFT)

  approvedBy Employee @relation(fields: [resolverId], references: [id])

  paychecks Paycheck[]
}

model Contact {
  id Int @id @default(autoincrement())

  employeeId Int @unique

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])

  /// List of emails
  emails Email[]

  /// List of phones
  phones Phone[]

  /// List of addresses
  addresses Address[]

  primaryEmail PrimaryEmail?

  primaryPhone PrimaryPhone?

  primaryAddress PrimaryAddress?
}

model Country {
  id Int @id @default(autoincrement())

  name String

  code String

  states State[]
}

model State {
  id Int @id @default(autoincrement())

  countryId Int

  name String

  code String

  country Country @relation(fields: [countryId], references: [id])

  addresses Address[]

  @@unique([countryId, name])
}

model Address {
  id Int @id @default(autoincrement())

  type ContactType

  contactId Int

  stateId Int

  street String

  zip String

  city String

  state State @relation(fields: [stateId], references: [id])

  contact Contact @relation(fields: [contactId], references: [id])

  primary PrimaryAddress?

  @@unique([contactId, street, city, stateId, zip])
}

model Email {
  id Int @id @default(autoincrement())

  type ContactType

  contactId Int

  email String

  contact Contact @relation(fields: [contactId], references: [id])

  primary PrimaryEmail?

  @@unique([contactId, email])
}

model Phone {
  id Int @id @default(autoincrement())

  type ContactType

  contactId Int

  phone String

  contact Contact @relation(fields: [contactId], references: [id])

  primary PrimaryPhone?

  @@unique([contactId, phone])
}

model PrimaryEmail {
  id Int @id @default(autoincrement())

  emailId Int @unique

  contactId Int @unique

  email Email @relation(fields: [emailId], references: [id])

  contact Contact @relation(fields: [contactId], references: [id])
}

model PrimaryPhone {
  id Int @id @default(autoincrement())

  phoneId Int @unique

  contactId Int @unique

  phone Phone @relation(fields: [phoneId], references: [id])

  contact Contact @relation(fields: [contactId], references: [id])
}

// 1. Re-add PrimaryAddress model
model PrimaryAddress {
  id Int @id @default(autoincrement())

  // FK to the Address record being selected
  addressId Int @unique

  // FK to the employee's Contact record
  contactId Int @unique

  address Address @relation(fields: [addressId], references: [id])
  contact Contact @relation(fields: [contactId], references: [id])
}
