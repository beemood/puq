generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Person gender
enum Gender {
  MALE
  FEMALE
}

/// Signle or married
enum MaritalStatus {
  SINGLE
  MARRIED
}

enum PaymentStatus {
  PENDING
  PAID
  DELAYED
}

/// Payment types (HANDED_CHECK,HANDED_CACHE,MAILED_CHECK,MAILED_CACHE,DIRECT_DEPOSIT,OTHER)
enum PaymentType {
  HANDED_CHECK
  HANDED_CACHE
  MAILED_CHECK
  MAILED_CACHE
  DIRECT_DEPOSIT
  OTHER
}

/// Employee status (INCOMMING, ACTIVE, INACTIVE, LEFT, TERMINATED)
enum EmployeeStatus {
  /// Employees are comming in the next business cycle
  INCOMMING

  /// Active employee 
  ACTIVE

  /// Inactive employee for vacation
  INACTIVE

  /// Employees who left the company
  LEFT

  /// Employees who are terminated
  TERMINATED
}

/// Employement type 
enum EmploymentType {
  /// Full time employee
  FULL_TIME

  /// Partime employee 
  PART_TIME

  /// External contractors
  CONTRACTOR

  /// Interns or guests who are taking training 
  INTERN
}

/// Pay frenquencies (ANNUAL, MONTHLY, BI_WEEKLY, WEEKLY, HOURLY)
enum PayFrequency {
  /// Yearly
  ANNUAL

  /// Montly
  MONTHLY

  /// Once in two weeks
  BI_WEEKLY

  /// Weekly
  WEEKLY

  /// Hourly
  HOURLY
}

enum TitleChangeType {
  /// When employee is moving to a higher ranked title
  PROMOTION

  /// When employee is moving to a same ranked title or low ranked title
  TRANSFER
}

enum TimeOffType {
  /// Timely defined vacation policy
  VACATION

  /// Health resons
  SICK

  /// Accumulated time offs
  PERSONAL

  /// Family related emergencies
  BEREAVEMENT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum BenefitStatus {
  /// The employee is currently covered by the benefit plan. The plan is in force and deductions are being taken (if applicable).	Inactive, Terminated
  ACTIVE

  /// The employee has made their selection, but coverage has not yet begun. This is common during the waiting period, or while the plan carrier/administrator is processing the enrollment (e.g., waiting for proof of eligibility or evidence of insurability).	Active, Denied, Canceled
  PENDING

  /// Specifically for benefits like voluntary life insurance where the employee must submit Evidence of Insurability (a medical questionnaire or exam) for approval before coverage can begin.	Pending (EOI Approved), Denied (EOI Denied)
  AWAITING_EOI

  /// The employee was eligible for the benefit but explicitly chose not to enroll in it.	Enrolled (during a future open enrollment or qualifying life event)
  WAIVED

  /// A general status meaning the employee has successfully signed up for the benefit. This often encompasses both Pending and Active periods but can be a transitional status before becoming Active.	Active
  ENROLLED
}

model Department {
  id Int @id @default(autoincrement())

  /// Parent department id
  parentId Int?

  /// Unique department name
  name String @unique

  //// Unique url friendly department name
  slug String @unique

  /// Parent department details 
  parent Department? @relation("children", fields: [parentId], references: [id])

  /// List of sub department details
  children Department[] @relation("children")

  /// List of titles under this department
  titles Title[]
}

model Title {
  id Int @id @default(autoincrement())

  /// Department id
  departmentId Int

  /// Unqiue title name such as Fullstack software developer
  name String @unique

  /// Unqiue url friendly title name
  slug String @unique

  /// Title description
  description String? @default("No Description")

  /// Department details
  department Department @relation(fields: [departmentId], references: [id])

  /// List of employees who have this title
  employees Employee[]

  /// List of title histories of employees
  histories TitleHistory[]
}

/// Employee table 
model Employee {
  id Int @id @default(autoincrement())

  /// Unique employee uuid for external usage such as contact, auth, and inventory services
  uuid String @unique

  /// Employee title id 
  titleId Int

  /// Empmloyee status
  status EmployeeStatus @default(INCOMMING)

  /// Employee title details 
  title Title @relation(fields: [titleId], references: [id])

  /// The list of teams that this employee leads
  leadTeams Team[] @relation("leadTeams")

  /// The list of teams that this employee is in
  memberships TeamMember[]

  /// Salary details
  salary Salary?

  /// Salary history details
  salaryHistory SalaryHistory[]

  /// List of benefits given to this employee
  benefits BenefitEnrolment[]

  /// List of title history for this employee
  titleHistory TitleHistory[]

  /// List of time off balances
  timeOffBalances TimeOffBalance[]

  /// List of time off requests made by this employee 
  timeOffRequests TimeOffRequest[]

  // List of time-offs that this employee (manager) resolved
  resolvedTimeOffs TimeOffRequest[] @relation("resolvedTimeOffs")

  /// List of clock-ins
  clockIns ClockIn[]

  /// List of payments paid to this employee
  payments Payment[] @relation("employee")

  /// List of payments resolved by this employee
  resolvedPayments Payment[] @relation("resolvedBy")
}

model Team {
  id Int @id @default(autoincrement())

  /// Team manager id
  managerId Int

  /// Unique team name
  name String @unique

  /// Team manager details 
  manager Employee @relation("leadTeams", fields: [managerId], references: [id])

  /// List of team member details
  members TeamMember[]
}

model TeamMember {
  id Int @id @default(autoincrement())

  /// Team id
  teamId Int

  /// Team member employee id
  memberId Int

  /// Member/employee details
  employee Employee @relation(fields: [memberId], references: [id])

  /// Team details
  team Team @relation(fields: [teamId], references: [id])
}

/// Employee salary table
model Salary {
  id Int @id @default(autoincrement())

  /// Employee id
  employeeId Int @unique

  /// Salary
  salary Decimal @db.Decimal(10, 2)

  /// Pay frequency such as ANNUAL, WEEKLY, HOURLY etc.
  frequency PayFrequency

  /// Last review date 
  lastReviewDate DateTime?

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])
}

/// Employee salary history
model SalaryHistory {
  id Int @id @default(autoincrement())

  /// Employee id
  employeeId Int

  /// Salary change date
  changeDate DateTime

  /// Old salary
  oldSalary Decimal @db.Decimal(10, 2)

  /// New salary
  newSalary Decimal @db.Decimal(10, 2)

  /// Change reson
  reason String?

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])
}

/// Employee benefits
model Benefit {
  id Int @id @default(autoincrement())

  /// Unqiue benefit name
  name String @unique

  /// Benefit description
  description String? @default("No Description")

  /// Benefit type 
  type String?

  /// List of enrolments/employees getting this benefit
  enrolments BenefitEnrolment[]
}

/// Benefit entrolment table
model BenefitEnrolment {
  id Int @id @default(autoincrement())

  /// Benefit id
  bid Int

  /// Employee id
  employeeId Int

  /// Benefit start date
  startDate DateTime

  /// Benefit status
  status BenefitStatus @default(PENDING)

  /// Benefit details
  benefit Benefit @relation(fields: [bid], references: [id])

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])

  @@unique([bid, employeeId])
}

/// Employee title hsitory table
model TitleHistory {
  id Int @id @default(autoincrement())

  /// Employee id
  employeeId Int

  /// Title id
  titleId Int

  /// Poistion change type 
  type TitleChangeType

  /// Reason for title change
  reason String?

  /// Start date for this title
  startDate DateTime

  /// End date for this poistion 
  endDate DateTime?

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])

  /// Title details
  title Title @relation(fields: [titleId], references: [id])

  @@unique([employeeId, startDate])
}

model TimeOffPolicy {
  id Int @id @default(autoincrement())

  /// Unique time off policy name
  name String @unique

  /// Time off type 
  type TimeOffType

  /// Accrual rate such as 0.04 which means employee earns 0.04 hours for each hour work
  accrualRate Decimal @db.Decimal(4, 2) // e.g., 0.04 hours per hour worked

  /// Maximum time-off hours can be used in the following business cycle
  maxRollover Decimal @db.Decimal(5, 2)

  /// Policy description 
  description String? @default("No description")

  /// List of employees time-off balance
  balances TimeOffBalance[]

  /// List of employees time-off requests
  requests TimeOffRequest[]
}

/// Employee time-off balance table
model TimeOffBalance {
  id Int @id @default(autoincrement())

  /// Policy id
  policyId Int

  /// Employee id
  employeeId Int

  /// Earned time-off hours
  accruedHours Decimal @db.Decimal(5, 2)

  /// Used time-off hours
  usedHours Decimal @db.Decimal(5, 2)

  /// Available time-off hours
  availableHours Decimal @db.Decimal(5, 2)

  /// Policy details
  policy TimeOffPolicy @relation(fields: [policyId], references: [id])

  /// Emplyee details 
  employee Employee @relation(fields: [employeeId], references: [id])

  /// Transactions/TimeOff logs
  transactions TimeOffTransaction[]

  @@unique([employeeId, policyId])
}

/// Time-off request table
model TimeOffRequest {
  id Int @id @default(autoincrement())

  /// Employee id
  employeeId Int

  /// Policy id
  policyId Int

  /// The id of the employee who resolved this request
  resolverId Int?

  /// Request status 
  status RequestStatus @default(PENDING)

  /// Desired start time for the time-off
  startDate DateTime

  /// Desired end time for the time-off
  endDate DateTime

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])

  /// Policy details
  policy TimeOffPolicy @relation(fields: [policyId], references: [id])

  /// The details of the employee who resolved this request
  resolver Employee? @relation("resolvedTimeOffs", fields: [resolverId], references: [id])

  /// The transaction details for this requst upon if approved.
  transaction TimeOffTransaction?
}

/// Time-off transaction/log table
model TimeOffTransaction {
  id Int @id @default(autoincrement())

  /// Employee time-off balance entry id
  balanceId Int

  /// Request id
  requestId Int? @unique

  /// Hourly approved amounts
  amount Decimal @db.Decimal(5, 2)

  /// Balance details
  balance TimeOffBalance @relation(fields: [balanceId], references: [id])

  /// Request details
  request TimeOffRequest? @relation(fields: [requestId], references: [id])
}

model ClockIn {
  id Int @id @default(autoincrement())

  /// Employee id
  employeeId Int

  // Optional payment id created when the employee paid
  paymentId Int?

  /// Time to enter the office
  clockIn DateTime @default(now())

  /// Time to leave the office
  clockOut DateTime?

  /// Employee details
  employee Employee @relation(fields: [employeeId], references: [id])

  payment Payment? @relation(fields: [paymentId], references: [id])

  @@unique([employeeId, clockIn])
}

/// Timely payment logs.
model Payment {
  id Int @id @default(autoincrement())

  /// Employee id
  employeeId Int

  /// Resolver (Manager) id
  resolverId Int

  /// Payment type 
  type PaymentType

  /// Payment status
  status PaymentStatus @default(PENDING)

  /// Employee details
  employee Employee @relation("employee", fields: [employeeId], references: [id])

  /// Employee (HR/Accounting manager) who resolved this payment
  resolvedBy Employee @relation("resolvedBy", fields: [resolverId], references: [id])

  /// List of working hours will be paid with this payment process
  hours ClockIn[]
}
