import type { Prisma } from '<%- projectName %>-db';
import type {
  <%- className %>Create,
  <%- className %>Projection,
  <%- className %>Query,
  <%- className %>Update,
} from '<%- projectName %>-db/zod';
import {
  <%- className %>CreateSchema,
  <%- className %>ProjectionSchema,
  <%- className %>QuerySchema,
  <%- className %>UpdateSchema,
} from '<%- projectName %>-db/zod';
import {
  AbstractResourceController,
  AutoResourceController,
  Body,
  ParamId,
  Query,
} from '@puq/nest';
import { InjectRepository } from '@puq/prisma';

@AutoResourceController()
export class <%- className %>Controller extends AbstractResourceController {
  constructor(
    @InjectRepository() protected readonly repo: Prisma.<%- className %>Delegate
  ) {
    super();
  }

  override async saveOne(
    @Body(<%- className %>CreateSchema) data: <%- className %>Create,
    @Query(<%- className %>ProjectionSchema) projection: <%- className %>Projection
  ) {
    return await this.repo.create({ ...projection, data });
  }

  override async findOneById(
    @ParamId() id: number,
    @Query(<%- className %>ProjectionSchema) projection: <%- className %>Projection
  ) {
    return await this.repo.findFirstOrThrow({ ...projection, where: { id } });
  }

  override async findMany(
    @Query(<%- className %>QuerySchema) query: <%- className %>Query,
    @Query(<%- className %>ProjectionSchema) projection: <%- className %>Projection
  ) {
    return await this.repo.findMany({ ...query, ...projection });
  }

  override updateOneById(
    @ParamId() id: number,
    @Query(<%- className %>ProjectionSchema) projection: <%- className %>Projection,
    @Body(<%- className %>UpdateSchema) data: <%- className %>Update
  ) {
    return this.repo.update({ ...projection, where: { id }, data });
  }

  override async deleteOneById(
    @ParamId() id: number,
    @Query(<%- className %>ProjectionSchema) projection: <%- className %>Projection
  ) {
    return await this.repo.delete({ ...projection, where: { id } });
  }
}
